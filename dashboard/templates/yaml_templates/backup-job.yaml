apiVersion: batch/v1
kind: CronJob
metadata:
  name: backup-{{ domain_name_dash }}
  namespace: kubepanel
spec:
  schedule: "0 0 * * *" # Runs at midnight
  jobTemplate:
    spec:
      ttlSecondsAfterFinished: 3600
      template:
        spec:
          restartPolicy: Never
          affinity:
            podAffinity:
              requiredDuringSchedulingIgnoredDuringExecution:
              - labelSelector:
                  matchLabels:
                    app: opendkim #because opendkim is running on the same node as kubepanel. fix this later
                topologyKey: "kubernetes.io/hostname"
          containers:
          - name: db-client
            env:
            - name: MARIADB_ROOT_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: mariadb-auth
                  key: password
            - name: DBUSER
              value: "{{ domain_name_underscore }}"
            - name: DBNAME
              value: "{{ domain_name_underscore }}"
            image: laszlokulcsar/db-client:v0.1
            imagePullPolicy: Always
            command:
              - /bin/bash
              - -c
              - |
                # Random sleep between 0 and 3600 seconds (1 hour)
                SLEEP_TIME=$(( $RANDOM % 3600 ))
                echo "Sleeping for ${SLEEP_TIME}s before snapshot..."
                sleep $SLEEP_TIME
                DATE=$(date +'%Y%m%d%H%M%S')
                echo $DATE
                # Now create the snapshot
                kubectl apply -f - <<EOF
                apiVersion: snapshot.storage.k8s.io/v1
                kind: VolumeSnapshot
                metadata:
                  name: {{ domain_name_dash }}-snapshot-$DATE
                  namespace: {{ domain_name_dash }}
                spec:
                  volumeSnapshotClassName: piraeus-snapshots
                  source:
                    persistentVolumeClaimName: {{ domain_name_dash }}-pvc
                EOF
                python3 /kubepanel/manage.py add_snapshot -sn {{ domain_name_dash }}-snapshot-$DATE -d {{ domain_name }}
                mysqldump -h mariadb.kubepanel.svc.cluster.local -uroot -p$MARIADB_ROOT_PASSWORD $DBNAME > /backup/{{ domain_name_dash }}-snapshot-$DATE.sql
                ls -alh /backup/
                set -euo pipefail
                echo "Cleaning VolumeSnapshots older than 6 days..."
                cutoff=$(date -d '6 days ago' +%s)
                # Fetch each snapshotâ€™s name|timestamp
                kubectl get volumesnapshot -n {{ domain_name_dash }} -o=jsonpath='{range .items[*]}{.metadata.name}{"|"}{.metadata.creationTimestamp}{"\n"}{end}' | while IFS='|' read name ts;
                  do
                    ts_s=$(date -d "$ts" +%s)
                    if [ "$ts_s" -lt "$cutoff" ]; then
                      echo "Deleting snapshot: $name (created $ts)"
                      kubectl delete volumesnapshot "$name" -n justawood-hu
                    fi
                  done
                echo "Removing SQL dumps older than 6 days..."
                find /backup -maxdepth 1 -name '{{ domain_name_dash }}-snapshot-*.sql' -mtime +6 -print -delete
                ls -alh /backup/
            volumeMounts:
            - name: kubepanel
              mountPath: /kubepanel
            - name: backup
              mountPath: /backup
          restartPolicy: Never
          volumes:
          - name: kubepanel
            persistentVolumeClaim:
              claimName: kubepanel
          - name: backup
            persistentVolumeClaim:
              claimName: {{ domain_name_dash }}-backup-pvc
