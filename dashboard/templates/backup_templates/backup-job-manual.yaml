apiVersion: batch/v1
kind: Job
metadata:
  name: backup-{{ domain_name_dash }}-{{ jobid }} 
  namespace: kubepanel
spec:
  template:
    spec:
      restartPolicy: Never
      affinity:
        podAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchLabels:
                app: opendkim # because opendkim is running on the same node as kubepanel. Fix this later
            topologyKey: "kubernetes.io/hostname"
      containers:
      - name: db-client
        env:
        - name: MARIADB_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mariadb-auth
              key: password
        - name: DBUSER
          value: "{{ domain_name_underscore }}"
        - name: DBNAME
          value: "{{ domain_name_underscore }}"
        - name: NAMESPACE
          value: "{{ domain_name_dash }}"
        - name: DOMAIN
          value: "{{ domain_name }}"
        image: laszlokulcsar/db-client:v0.1
        imagePullPolicy: Always
        command:
          - /bin/bash
          - -c
          - |
            set -euo pipefail
  
            DATE=$(date +'%Y%m%d%H%M%S')
            SNAP_NAME="${NAMESPACE}-snapshot-${DATE}"
            LOGFILE=/backup/${NAMESPACE}-snapshot-${DATE}.log
            
            # redirect EVERYTHING (stdout+stderr) into $LOGFILE *and* still echo to console
            exec > >(tee -a "$LOGFILE") 2>&1
            
            echo ">>> Starting backup job at $(date)"
            kubectl apply -f - <<EOF
            apiVersion: snapshot.storage.k8s.io/v1
            kind: VolumeSnapshot
            metadata:
              name: ${SNAP_NAME}
              namespace: ${NAMESPACE}
            spec:
              volumeSnapshotClassName: piraeus-snapshots
              source:
                persistentVolumeClaimName: ${NAMESPACE}-pvc
            EOF
            echo ">>> Starting MariaDB dump at $(date)"
            mysqldump -h mariadb.kubepanel.svc.cluster.local \
              -u root -p"${MARIADB_ROOT_PASSWORD}" "${DBNAME}" \
              > /backup/${SNAP_NAME}.sql
            
            echo ">>> Backup finished at $(date)"
            
            echo ">>> Django record created; files in /backup:"
            ls -alh /backup/
            python3 /kubepanel/manage.py add_snapshot \
              --snapshotname "${SNAP_NAME}" \
              --domain       "${DOMAIN}" \
              --logfile      "$LOGFILE"
        volumeMounts:
        - name: kubepanel
          mountPath: /kubepanel
        - name: backup
          mountPath: /backup
      volumes:
      - name: kubepanel
        persistentVolumeClaim:
          claimName: kubepanel
      - name: backup
        persistentVolumeClaim:
          claimName: {{ domain_name_dash }}-backup-pvc

