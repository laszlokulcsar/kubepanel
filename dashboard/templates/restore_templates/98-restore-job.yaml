apiVersion: batch/v1
kind: Job
metadata:
  name: restore-job-{{ jobid }}
  namespace: kubepanel
spec:
  template:
    spec:
      restartPolicy: Never
      volumes:
      - name: backup
        persistentVolumeClaim:
          claimName: {{ domain_name_dash }}-backup-pvc
      containers:
      - name: restore-job
        env:
        - name: MARIADB_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mariadb-auth
              key: password
        - name: DBUSER
          value: "{{ domain_name_underscore }}"
        - name: DBNAME
          value: "{{ domain_name_underscore }}"
        image: laszlokulcsar/db-client:v0.1
        imagePullPolicy: Always
        volumeMounts:
        - name: backup
          mountPath: /backup
        command: 
              - /bin/sh
              - -c
              - |
                kubectl annotate pods --all --overwrite kubepanel.status='Restore in progress' -n {{ domain_name_dash }}
                kubectl scale deployment/php --replicas=0 -n {{ domain_name_dash }}
                kubectl scale deployment/nginx --replicas=0 -n {{ domain_name_dash }}
                kubectl delete pvc/{{ domain_name_dash }}-pvc -n {{ domain_name_dash }}
                kubectl apply -f - <<EOF
                apiVersion: v1
                kind: PersistentVolumeClaim
                metadata:
                  name: {{ domain_name_dash }}-pvc
                  namespace: {{ domain_name_dash }}
                spec:
                  storageClassName: linstor-sc
                  resources:
                    requests:
                      storage: {{ storage_size }}Gi
                  dataSource:
                    apiGroup: snapshot.storage.k8s.io
                    kind: VolumeSnapshot
                    name: {{ volumesnapshot }}
                  accessModes:
                    - ReadWriteMany
                EOF
                mysql -h mariadb.kubepanel.svc.cluster.local -uroot -p$MARIADB_ROOT_PASSWORD $DBNAME < /backup/{{ volumesnapshot }}.sql
                kubectl scale deployment/nginx --replicas=1 -n {{ domain_name_dash }}
                kubectl scale deployment/php --replicas=1 -n {{ domain_name_dash }}
  backoffLimit: 4
